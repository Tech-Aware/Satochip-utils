name: Build Executables
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcsclite-dev swig python3-tk fuse libfuse2 appstream fonts-liberation imagemagick

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install swig
        brew install create-dmg

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install swig
        choco install imagemagick

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyscard || echo "Failed to install pyscard"

    - name: Verify Python dependencies
      run: |
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import PIL; print('Pillow version:', PIL.__version__)"
        python -c "import tkinter; print('Tkinter is installed')"
        python -c "import cryptography; print('Cryptography version:', cryptography.__version__)"
        python -c "import ecdsa; print('ECDSA version:', ecdsa.__version__)"
        python -c "import mnemonic; print('Mnemonic is installed')"
        python -c "import pyscard; print('PyScard is installed')" || echo "PyScard is not installed"
        python -c "import customtkinter; print('CustomTkinter version:', customtkinter.__version__)"
        python -c "import pyaes; print('PyAES is installed')"
        python -c "import pycparser; print('pycparser version:', pycparser.__version__)"

    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: python build_scripts/build_windows.py

    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        python build_scripts/build_linux.py
        echo "Content of current directory:"
        ls -la
        echo "Content of AppDir:"
        ls -R AppDir

    - name: Check AppImage tool
      if: matrix.os == 'ubuntu-latest'
      run: |
        ./appimagetool-x86_64.AppImage --version
        file ./appimagetool-x86_64.AppImage

    - name: List AppDir contents (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: ls -R AppDir

    - name: Check executable dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: ldd AppDir/usr/bin/satochip_utils || echo "ldd command failed"

    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      run: python build_scripts/build_macos.py

    - name: Upload artifact (Windows)
      if: success() && matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-satochip_utils
        path: dist/satochip_utils.exe

    - name: Upload artifact (Linux)
      if: success() && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-satochip_utils
        path: satochip_utils.AppImage

    - name: Upload artifact (macOS)
      if: success() && matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-satochip_utils
        path: dist/Satochip_Utils.dmg

    - name: Upload AppDir for debugging (Linux)
      if: failure() && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-appdir
        path: AppDir/

    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}
        path: |
          *.log
          build/satochip_utils/warn-satochip_utils.txt
          build/satochip_utils/xref-satochip_utils.html