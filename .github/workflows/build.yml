name: Build Executables

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false  # Continue with other jobs if one fails

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Updated to v3

    - name: Set up Python
      uses: actions/setup-python@v4  # Updated to v4
      with:
        python-version: '3.7'

    # Caching dependencies
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Install dependencies for each OS
    - name: Install dependencies on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcsclite-dev swig python3-tk
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install Pillow
      # Added error handling
      continue-on-error: false

    - name: Install dependencies on macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install swig
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      continue-on-error: false

    - name: Install dependencies on Windows
      if: matrix.os == 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
      continue-on-error: false

    # Security scan
    - name: Run security scan
      run: |
        pip install bandit
        bandit -r . -f custom -o security_report.txt
      continue-on-error: true

    # Run tests
    - name: Run tests
      run: |
        pip install pytest
        pytest tests/
      continue-on-error: false

    # Build executables for each OS
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows-specific build command
        pyinstaller --onefile --add-data "pysatochip\pysatochip\cert\*;pysatochip/pysatochip/cert" --add-data "pictures_db\*;pictures_db" --add-data "pysatochip\pysatochip\CardConnector.py;pysatochip" satochip_utils.py --name satochip_utils.exe
      continue-on-error: false

    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Linux-specific build command
        pyinstaller --onefile --add-data "pysatochip/pysatochip/cert/*:pysatochip/pysatochip/cert" --add-data "pictures_db/*:pictures_db" --add-data "pysatochip/pysatochip/CardConnector.py:pysatochip" satochip_utils.py --name satochip_utils
      continue-on-error: false

    - name: Build executable (macOS - universal)
      if: matrix.os == 'macos-latest'
      run: |
        # macOS-specific build command for universal binary
        pyinstaller --onefile --target-arch universal2 --add-data "pysatochip/pysatochip/cert/*:pysatochip/pysatochip/cert" --add-data "pictures_db/*:pictures_db" --add-data "pysatochip/pysatochip/CardConnector.py:pysatochip" satochip_utils.py --name satochip_utils
      continue-on-error: false

    # Upload artifacts
    - name: Upload artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3  # Updated to v3
      with:
        name: windows-satochip_utils
        path: dist/satochip_utils.exe

    - name: Upload artifact (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: linux-satochip_utils
        path: dist/satochip_utils

    - name: Upload artifact (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: macos-satochip_utils
        path: dist/satochip_utils

    # Upload security report
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security_report.txt